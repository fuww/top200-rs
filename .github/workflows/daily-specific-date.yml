# SPDX-FileCopyrightText: 2025 Joost van der Laan <joost@fashionunited.com>
#
# SPDX-License-Identifier: AGPL-3.0-only

name: Daily Market Caps Multi-Period Analysis

on:
  schedule:
    # Run at 01:00 UTC every day (1 hour after the main daily-run)
    - cron: '0 1 * * *'
  # Allow manual trigger
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  # Add your environment variables here
  FINANCIALMODELINGPREP_API_KEY: ${{ secrets.FINANCIALMODELINGPREP_API_KEY }}
  POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
  # Use vars.BREVO_SENDER_EMAIL for repository variable or fallback to a default
  BREVO_SENDER_EMAIL: ${{ vars.BREVO_SENDER_EMAIL || 'noreply@fashionunited.com' }}
  # Default sender name if BREVO_SENDER_NAME is not set
  BREVO_SENDER_NAME: ${{ vars.BREVO_SENDER_NAME || 'Top200-RS Notifier' }}
  # Email recipients (comma-separated list)
  NOTIFICATION_RECIPIENTS: ${{ secrets.NOTIFICATION_RECIPIENTS || vars.NOTIFICATION_RECIPIENTS || 'it@fashionunited.com' }}

jobs:
  collect-and-compare-data:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
        with:
          determinate: true
      - uses: DeterminateSystems/flakehub-cache-action@main
      - uses: DeterminateSystems/flake-checker-action@main

      - name: Calculate dates
        id: get-dates
        run: |
          # Get today's date in YYYY-MM-DD format
          TODAY=$(date -u +%Y-%m-%d)
          echo "today=$TODAY" >> $GITHUB_OUTPUT
          echo "Today's date: $TODAY"
          
          # Get date 7 days ago
          WEEK_AGO=$(date -u -d "7 days ago" +%Y-%m-%d)
          echo "week_ago=$WEEK_AGO" >> $GITHUB_OUTPUT
          echo "7 days ago: $WEEK_AGO"
          
          # Get same day last month
          # Handle edge cases for dates like Jan 31 -> Feb 28/29
          YEAR=$(date -u +%Y)
          MONTH=$(date -u +%m)
          DAY=$(date -u +%d)
          
          # Calculate previous month
          if [ "$MONTH" = "01" ]; then
            PREV_MONTH="12"
            PREV_YEAR=$((YEAR - 1))
          else
            PREV_MONTH=$(printf "%02d" $((10#$MONTH - 1)))
            PREV_YEAR=$YEAR
          fi
          
          # Check if the day exists in the previous month
          # If not, use the last day of that month
          MONTH_AGO="${PREV_YEAR}-${PREV_MONTH}-${DAY}"
          if ! date -d "$MONTH_AGO" >/dev/null 2>&1; then
            # Get last day of previous month
            MONTH_AGO=$(date -u -d "${PREV_YEAR}-${PREV_MONTH}-01 +1 month -1 day" +%Y-%m-%d)
          fi
          
          echo "month_ago=$MONTH_AGO" >> $GITHUB_OUTPUT
          echo "Same day last month: $MONTH_AGO"

      - name: Build the application
        run: |
          nix \
            --extra-experimental-features "nix-command flakes" \
            develop \
            --command bash -c "cargo build --release"

      - name: Fetch today's market caps
        run: |
          echo "Fetching market caps for today: ${{ steps.get-dates.outputs.today }}"
          nix \
            --extra-experimental-features "nix-command flakes" \
            develop \
            --command bash -c "./target/release/top200-rs fetch-specific-date-market-caps ${{ steps.get-dates.outputs.today }}"

      - name: Fetch market caps from 7 days ago
        run: |
          echo "Fetching market caps for 7 days ago: ${{ steps.get-dates.outputs.week_ago }}"
          nix \
            --extra-experimental-features "nix-command flakes" \
            develop \
            --command bash -c "./target/release/top200-rs fetch-specific-date-market-caps ${{ steps.get-dates.outputs.week_ago }}"

      - name: Fetch market caps from same day last month
        run: |
          echo "Fetching market caps for same day last month: ${{ steps.get-dates.outputs.month_ago }}"
          nix \
            --extra-experimental-features "nix-command flakes" \
            develop \
            --command bash -c "./target/release/top200-rs fetch-specific-date-market-caps ${{ steps.get-dates.outputs.month_ago }}"

      - name: Compare week-over-week (7 days)
        run: |
          echo "Comparing market caps: ${{ steps.get-dates.outputs.week_ago }} to ${{ steps.get-dates.outputs.today }}"
          nix \
            --extra-experimental-features "nix-command flakes" \
            develop \
            --command bash -c "./target/release/top200-rs compare-market-caps --from ${{ steps.get-dates.outputs.week_ago }} --to ${{ steps.get-dates.outputs.today }}"

      - name: Compare month-over-month
        run: |
          echo "Comparing market caps: ${{ steps.get-dates.outputs.month_ago }} to ${{ steps.get-dates.outputs.today }}"
          nix \
            --extra-experimental-features "nix-command flakes" \
            develop \
            --command bash -c "./target/release/top200-rs compare-market-caps --from ${{ steps.get-dates.outputs.month_ago }} --to ${{ steps.get-dates.outputs.today }}"

      - name: Generate charts for week-over-week comparison
        run: |
          echo "Generating charts for week-over-week comparison"
          nix \
            --extra-experimental-features "nix-command flakes" \
            develop \
            --command bash -c "./target/release/top200-rs generate-charts --from ${{ steps.get-dates.outputs.week_ago }} --to ${{ steps.get-dates.outputs.today }}"

      - name: Generate charts for month-over-month comparison
        run: |
          echo "Generating charts for month-over-month comparison"
          nix \
            --extra-experimental-features "nix-command flakes" \
            develop \
            --command bash -c "./target/release/top200-rs generate-charts --from ${{ steps.get-dates.outputs.month_ago }} --to ${{ steps.get-dates.outputs.today }}"

      - name: List generated files
        run: |
          echo "Generated files in output directory:"
          ls -la output/ || echo "Output directory not found"

      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: market-data-multi-period-${{ steps.get-dates.outputs.today }}-run-${{ github.run_number }}
          path: |
            output/marketcaps_${{ steps.get-dates.outputs.today }}_*.csv
            output/marketcaps_${{ steps.get-dates.outputs.week_ago }}_*.csv
            output/marketcaps_${{ steps.get-dates.outputs.month_ago }}_*.csv
            output/comparison_${{ steps.get-dates.outputs.week_ago }}_to_${{ steps.get-dates.outputs.today }}_*.csv
            output/comparison_${{ steps.get-dates.outputs.week_ago }}_to_${{ steps.get-dates.outputs.today }}_*.md
            output/comparison_${{ steps.get-dates.outputs.month_ago }}_to_${{ steps.get-dates.outputs.today }}_*.csv
            output/comparison_${{ steps.get-dates.outputs.month_ago }}_to_${{ steps.get-dates.outputs.today }}_*.md
            output/chart_*.svg
          retention-days: 90

      - name: Send Email Notification via Brevo API
        if: success() # Only run if previous steps were successful
        env:
          EMAIL_SUBJECT: "Market Caps Multi-Period Analysis - ${{ steps.get-dates.outputs.today }} - Run #${{ github.run_number }}"
          GITHUB_RUN_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          GITHUB_RUN_NUMBER: "${{ github.run_number }}"
          GITHUB_SHA: "${{ github.sha }}"
          # Pass the dates as environment variables for the script
          TODAY_DATE: "${{ steps.get-dates.outputs.today }}"
          WEEK_AGO_DATE: "${{ steps.get-dates.outputs.week_ago }}"
          MONTH_AGO_DATE: "${{ steps.get-dates.outputs.month_ago }}"
        run: |
          # Use the send_brevo_email.sh script for cleaner JSON handling
          ./send_brevo_email.sh multi-period